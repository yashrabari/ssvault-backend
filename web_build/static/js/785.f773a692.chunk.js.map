{"version":3,"file":"static/js/785.f773a692.chunk.js","mappings":"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","sources":["pages/CreateProfile/index.js"],"sourcesContent":["import React, { useEffect, useMemo } from \"react\"\r\nimport { useState } from \"react\"\r\nimport {\r\n  Back,\r\n  Button,\r\n  ButtonBar,\r\n  CheckBox,\r\n  Container,\r\n  InputGroup,\r\n  Label,\r\n  Page,\r\n  ProfileImage,\r\n  Row,\r\n  Title,\r\n} from \"../../components/common\"\r\nimport Select from 'react-select';\r\nimport { components } from \"react-select\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getUserProfile } from \"../../api\";\r\nimport putUserProfile from \"../../api/putUserProfile\";\r\nimport { useNavigate } from \"react-router-dom\"\r\n// import getCategory from \"../../api/getCategory\";\r\nimport { login, logout } from \"../../store/actions/auth\";\r\nimport { useUpdateProfileMutation, useGetCountriesQuery } from \"../../store/slice/api\";\r\nimport LoadingSpinner from \"../../components/common/LoadingSpinner\";\r\n\r\nconst Option = (props) => {\r\n  return (\r\n    <div>\r\n      <components.Option {...props}>\r\n        <CheckBox\r\n          text={props.label}\r\n          onChange={() => null}\r\n          checked={props.isSelected}\r\n        />\r\n      </components.Option>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function CreateProfile() {\r\n  const navigate = useNavigate()\r\n  const dispatch = useDispatch();\r\n  const token = useSelector(state => state.reducer.auth.token)\r\n  const [userID, setuserID] = useState(\"\")\r\n  const [phoneNumber, setphoneNumber] = useState(\"\")\r\n  const [imagePreview, setImagePreview] = useState(null)\r\n  const [imageFile, setImageFile] = useState(null)\r\n  const [fullName, setFullName] = useState(\"\")\r\n  const [userName, setUserName] = useState(\"\")\r\n  const [location, setLocation] = useState(\"\")\r\n  // const [category, setCategory] = useState(\"\")\r\n  // const [categoryoptions, setcategoryoptions] = useState([])\r\n  const [verificationPeriod, setVerificationPeriod] = useState(\"\")\r\n  const [upcomingdata, setupcomingdata] = useState([])\r\n  const [country, setCountry] = useState('')\r\n\r\n  const [updateProfile] = useUpdateProfileMutation()\r\n  const { data: countries, isLoading: isCountriesLoading, isSuccess: countriesSuccessfullyLoaded } = useGetCountriesQuery()\r\n  const verificationperiodoptions = [\r\n    { value: 'One Week', label: 'One Week', color: '#00B8D9', isFixed: true, },\r\n    { value: 'Two Week', label: 'Two Week', color: '#0052CC', isFixed: true },\r\n    { value: 'One Month', label: 'One Month', color: '#5243AA', isFixed: true },\r\n  ]\r\n\r\n  const customStyles = {\r\n    control: (provided, state) => ({\r\n      ...provided,\r\n      background: '#fff',\r\n      borderRadius: '10px',\r\n      borderColor: '#292D3233',\r\n      height: '80px',\r\n      padding: '0px 6px',\r\n      fontfamily: \"TT Commons\",\r\n      fontSize: '16px',\r\n      lineHeight: '26px',\r\n      boxShadow: state.isFocused ? null : null,\r\n      '&:hover': {\r\n        borderColor: '#00A652',\r\n      }\r\n    }),\r\n    indicatorSeparator: state => ({\r\n      display: 'none',\r\n    }),\r\n    option: (provided, state) => ({\r\n      ...provided,\r\n      backgroundColor: 'white',\r\n      color: 'black',\r\n      '&:hover': {\r\n        backgroundColor: '#00A652',\r\n      }\r\n    }),\r\n    placeholder: (defaultStyles) => ({\r\n      ...defaultStyles,\r\n      fontFamily: \"TT Commons\",\r\n      fontSize: '18px',\r\n    })\r\n  }\r\n  useEffect(() => {\r\n    getUserProfile(token).then((response) => {\r\n      console.log(response.results)\r\n      setupcomingdata(response.results);\r\n      response.results.map((e) => {\r\n        setImageFile(e.profile_picture)\r\n        setFullName(e.name);\r\n        setuserID(e.id);\r\n        setphoneNumber(e.phone_number);\r\n        setUserName(e.email)\r\n        // setCategory(e.category?.length ? { value: e.category[0].id, label: e.category[0].name } : null)\r\n        setVerificationPeriod(e.verification_period ? { value: e.verification_period, label: e.verification_period } : null)\r\n      })\r\n    })\r\n    // getCategory(token).then((response) => {\r\n    //   setcategoryoptions(response.results)\r\n    // })\r\n  }, [])\r\n  const handleImage = e => {\r\n    setImagePreview(URL.createObjectURL(e.target.files[0]))\r\n    setImageFile(e.target.files[0])\r\n  }\r\n  const loggedIn = useSelector(state => state.reducer.auth.loggedIn)\r\n  useEffect(() => {\r\n    if (loggedIn && imageFile && fullName && verificationPeriod) {\r\n      navigate(\"/home\")\r\n    }\r\n  }, [loggedIn, navigate])\r\n\r\n  const countriesOptions = useMemo(() => {\r\n    if (countries) {\r\n      console.log('country', countries)\r\n      return countries.data.map((country) => ({ value: country.country, label: country.country }))\r\n    }\r\n  }, [countries])\r\n\r\n  const handleLogout = () => {\r\n    dispatch(logout())\r\n    navigate(\"/\")\r\n  }\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault()\r\n    if (!fullName || !verificationPeriod) return alert('Please fill all fields.')\r\n    console.log(\r\n      imageFile,\r\n      fullName,\r\n      userName,\r\n      location,\r\n      // category,\r\n      verificationPeriod\r\n    )\r\n    const formdata = { id: userID, user_data: JSON.stringify({ name: fullName, email: userName, location: country, verification_period: verificationPeriod?.value })  }\r\n    if (imageFile) {\r\n      formdata['profile_picture'] = imageFile\r\n    }\r\n    updateProfile(formdata)\r\n      .then((response) => {\r\n        dispatch(login({\r\n          user: {\r\n            response,\r\n            token: token\r\n          }\r\n        }))\r\n        navigate('/home')\r\n      }) \r\n      .catch((err) => {\r\n        console.log(err)\r\n        window.alert(JSON.stringify(err))\r\n      })\r\n  }\r\n  if (!countriesOptions) {\r\n    return <LoadingSpinner />\r\n  }\r\n  \r\n  return (\r\n    <Page>\r\n      <Container\r\n        width=\"1227px\"\r\n        margin=\"100px\"\r\n        padding=\"70px\"\r\n        borderRadius=\"20px\"\r\n      >\r\n        <Back onClick={handleLogout} />\r\n        <Title>Create Profile</Title>\r\n\r\n        <form onSubmit={onSubmit}>\r\n          <ProfileImage imagePreview={imagePreview ? imagePreview : imageFile} handleImage={handleImage} />\r\n          {upcomingdata.map((item) => {\r\n            return (\r\n              <>\r\n                <InputGroup\r\n                  label=\"Full Name\"\r\n                  placeholder=\"Enter your full name\"\r\n                  value={fullName}\r\n                  onChange={e => setFullName(e.target.value)}\r\n                />\r\n                <InputGroup\r\n                  disabled='true'\r\n                  label=\"Email\"\r\n                  placeholder=\"Enter your email\"\r\n                  value={item.email}\r\n                  onChange={e => setUserName(e.target.value)}\r\n                />\r\n                {countriesOptions\r\n                  && <>\r\n                    <Row justifyContent=\"space-between\">\r\n                      <Label>Location</Label>\r\n                    </Row>\r\n                    <Select\r\n                      menuPosition=\"left\"\r\n                      placeholder='Select the location'\r\n                      value={countriesOptions.find(el => el.value === country)}\r\n                      styles={customStyles}\r\n                      onChange={(e) => {\r\n                        setCountry(e.value)\r\n                      }}\r\n                      options={countriesOptions}\r\n                      closeMenuOnSelect={false}\r\n                      hideSelectedOptions={false}\r\n                      components={{ Option }}\r\n                    />\r\n                  </>\r\n                }\r\n                {/* <Row justifyContent=\"space-between\">\r\n                  <Label>Category</Label>\r\n                </Row>\r\n                <Select\r\n                  menuPosition=\"left\"\r\n                  placeholder='Select the category'\r\n                  value={category}\r\n                  styles={customStyles}\r\n                  onChange={(e) => {\r\n                    setCategory(e)\r\n                  }}\r\n                  options={categoryoptions.map((cat, index) => {\r\n                    return ({\r\n                      label: cat.name,\r\n                      value: cat.id,\r\n                      key: index\r\n                    })\r\n                  })}\r\n                  closeMenuOnSelect={false}\r\n                  hideSelectedOptions={false}\r\n                  components={{\r\n                    Option\r\n                  }}\r\n                /> */}\r\n                <div style={{ display: 'block', marginTop: '1rem', marginBottom: '1rem' }}>\r\n                  <Row justifyContent=\"space-between\">\r\n                    <Label>Verification Period</Label>\r\n                  </Row>\r\n                  <Select\r\n                    placeholder='Select the verification period'\r\n                    value={verificationPeriod}\r\n                    styles={customStyles}\r\n                    onChange={(e) => {\r\n                      console.log(e)\r\n                      setVerificationPeriod(e)\r\n                    }}\r\n                    options={verificationperiodoptions}\r\n                    closeMenuOnSelect={false}\r\n                    hideSelectedOptions={false}\r\n                    components={{\r\n                      Option\r\n                    }}\r\n                  />\r\n                </div>\r\n                <ButtonBar>\r\n                  <Button color=\"#00A652\" type=\"submit\">\r\n                    Save\r\n                  </Button>\r\n                </ButtonBar>\r\n              </>\r\n            )\r\n          })}\r\n        </form>\r\n      </Container>\r\n    </Page>\r\n  )\r\n}\r\n"],"names":["Option","props","c","text","label","onChange","checked","isSelected","CreateProfile","navigate","useNavigate","dispatch","useDispatch","token","useSelector","state","reducer","auth","useState","userID","setuserID","setphoneNumber","imagePreview","setImagePreview","imageFile","setImageFile","fullName","setFullName","userName","setUserName","location","verificationPeriod","setVerificationPeriod","upcomingdata","setupcomingdata","country","setCountry","useUpdateProfileMutation","updateProfile","useGetCountriesQuery","countries","data","verificationperiodoptions","isLoading","isSuccess","value","color","isFixed","customStyles","control","provided","background","borderRadius","borderColor","height","padding","fontfamily","fontSize","lineHeight","boxShadow","isFocused","indicatorSeparator","display","option","backgroundColor","placeholder","defaultStyles","fontFamily","useEffect","getUserProfile","then","response","console","log","results","map","e","profile_picture","name","id","phone_number","email","verification_period","loggedIn","countriesOptions","useMemo","width","margin","onClick","logout","onSubmit","preventDefault","alert","formdata","user_data","JSON","stringify","login","user","catch","err","window","handleImage","URL","createObjectURL","target","files","item","disabled","justifyContent","menuPosition","find","el","styles","options","closeMenuOnSelect","hideSelectedOptions","components","style","marginTop","marginBottom","type","LoadingSpinner"],"sourceRoot":""}