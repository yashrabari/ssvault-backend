{"version":3,"file":"static/js/115.12d69c71.chunk.js","mappings":"kPAoBe,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEjB,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAoDF,EAAAA,EAAAA,UAAS,IAA7D,eAAOG,EAAP,KAA2BC,EAA3B,KACA,GAA8CJ,EAAAA,EAAAA,WAAS,GAAvD,eAAOK,EAAP,KAAwBC,EAAxB,KACA,GAA8CN,EAAAA,EAAAA,WAAS,GAAvD,eACA,GADA,WACwDA,EAAAA,EAAAA,WAAS,IAAjE,eAAOO,EAAP,KAA6BC,EAA7B,KACA,GAAoDR,EAAAA,EAAAA,WAAS,GAA7D,eAA2BS,GAA3B,WACA,GAAyBC,EAAAA,EAAAA,MAAlBC,GAAP,eAEMC,GAAwBC,EAAAA,EAAAA,KAC5B,SAAAC,GAAK,OAAIA,EAAMC,QAAQC,eAAeC,WAElCC,GAAQL,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,QAAQI,cAAcD,UAC7CL,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,QAAQK,KAAKC,UAE1DC,EAAAA,EAAAA,YAAU,WACJV,GACFhB,EAAS,WAEV,CAACgB,EAAuBhB,IAoD3B,OACE,SAAC,KAAD,WACE,UAAC,KAAD,CACE2B,MAAM,SACNC,OAAO,QACPC,QAAQ,OACRC,aAAa,OAJf,WAME,SAAC,KAAD,CAAOF,OAAO,OAAd,8BAECjB,IAAwB,SAAC,KAAD,CAAWoB,MAAM,UAAjB,uCACxBtB,IAAmB,SAAC,KAAD,CAAWsB,MAAM,UAAjB,sHAEpB,SAAC,KAAD,CACEC,MAAM,mBACNC,YAAY,2BACZC,KAAK,WACLC,MAAO9B,EACP+B,SAAU,SAAAC,GAAC,OA1BQF,EA0BcE,EAAEC,OAAOH,WAzBhD7B,EAAe6B,GADS,IAACA,MA4BrB,SAAC,KAAD,CACEH,MAAM,mBACNC,YAAY,6BACZC,KAAK,WACLC,MAAO5B,EACP6B,SAAU,SAAAC,GAAC,OA7BWF,EA6BcE,EAAEC,OAAOH,WA5BnD3B,EAAsB2B,GADK,IAACA,MAgCxB,SAAC,KAAD,WACE,SAAC,KAAD,CAAQJ,MAAM,UAAUQ,QAjEH,WAE3B,OAAIlC,IAAgBE,GAClBK,GAAwB,QACxBF,GAAmB,IAHV,qEAMH8B,KAAKjC,QAMbQ,EAAe,CAAER,mBAAAA,EAAoBe,MAAAA,IAASmB,SAASC,MAAK,SAACC,GAC3DC,QAAQC,IAAI,OAAQF,GAChBA,EAAKG,SACPlC,GAAwB,GACxBF,GAAmB,GACnBV,EAAS,WAETA,EAAS,8BAGV+C,OAAM,SAACC,GACR9C,EAASW,EAAsBmC,EAAMF,UACrCF,QAAQC,IAAI,MAAOG,OAjBnBtC,GAAmB,QACnBE,GAAwB,KAwDpB,uBAGF,SAAC,KAAD","sources":["pages/ChangePassword/index.js"],"sourcesContent":["import React from \"react\"\r\nimport { useEffect } from \"react\"\r\nimport { useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport { postChangePassword } from \"../../api\"\r\nimport {\r\n  Back,\r\n  Button,\r\n  ButtonBar,\r\n  Container,\r\n  InputGroup,\r\n  Page,\r\n  Paragraph,\r\n  Title\r\n} from \"../../components/common\"\r\nimport { changePassword, login } from \"../../store/actions/auth\"\r\nimport { useSetNewPasswordMutation } from \"../../store/slice/api\"\r\nimport { passwordChanged, requestChangePassword, setChangePasswordError } from \"../../store/slice/mainSlice\"\r\n\r\nexport default function ChangePassword() {\r\n  const navigate = useNavigate()\r\n  const dispatch = useDispatch()\r\n\r\n  const [newPassword, setNewPassword] = useState('')\r\n  const [confirmNewPassword, setConfirmNewPassword] = useState('')\r\n  const [isSpecialLetter, setIsSpecialLetter] = useState(false)\r\n  const [isCapitalLetter, setIsCapitalLetter] = useState(false)\r\n  const [confirmPasswordError, setConfirmPasswordError] = useState(false)\r\n  const [resetPasswordError, setResetPasswordError] = useState(false)\r\n  const [addNewPassword] = useSetNewPasswordMutation()\r\n\r\n  const changePasswordSuccess = useSelector(\r\n    state => state.reducer.changePassword.success\r\n  )\r\n  const email = useSelector(state => state.reducer.resetPassword.email)\r\n  const authToken = useSelector(state => state.reducer.auth.token)\r\n\r\n  useEffect(() => {\r\n    if (changePasswordSuccess) {\r\n      navigate(\"/home\")\r\n    }\r\n  }, [changePasswordSuccess, navigate])\r\n\r\n  // const handleSubmit = async e => {\r\n  //   e.preventDefault()\r\n  //   const token = `Token ${authToken}`\r\n\r\n  //   dispatch(requestChangePassword())\r\n  //   try {\r\n  //     await postChangePassword(password, confirmedPassword, token)\r\n  //     dispatch(passwordChanged())\r\n  //     navigate(\"/login\")\r\n  //   } catch (error) {\r\n  //     dispatch(setChangePasswordError(error.message))\r\n  //   }\r\n  // }\r\n\r\n  const handleChangePassword = () => {\r\n    const re = /^(?=.*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?])(?=.*[0-9])(?=.*[a-z])/;\r\n    if (newPassword !== confirmNewPassword) {\r\n      setConfirmPasswordError(true)\r\n      setIsSpecialLetter(false)\r\n      return\r\n    }\r\n    if (!re.test(confirmNewPassword)) {\r\n      setIsSpecialLetter(true)\r\n      setConfirmPasswordError(false)\r\n      return\r\n    }\r\n    \r\n    addNewPassword({ confirmNewPassword, email }).unwrap().then((data) => {\r\n      console.log('data', data)\r\n      if (data.message) {\r\n        setConfirmPasswordError(false)\r\n        setIsSpecialLetter(false)\r\n        navigate(\"/login\")\r\n      } else {\r\n        navigate(\"/verify-forgot-password\")\r\n      }\r\n\r\n    }).catch((error) => {\r\n      dispatch(setResetPasswordError(error.message))\r\n      console.log('err', error);\r\n    })\r\n  }\r\n  const handleNewPassword = (value) => {\r\n    setNewPassword(value)\r\n  }\r\n\r\n  const handleConfimPassword = (value) => {\r\n    setConfirmNewPassword(value)\r\n  }\r\n\r\n  return (\r\n    <Page>\r\n      <Container\r\n        width=\"1227px\"\r\n        margin=\"100px\"\r\n        padding=\"70px\"\r\n        borderRadius=\"20px\"\r\n      >\r\n        <Title margin=\"30px\">Set New Password</Title>\r\n\r\n        {confirmPasswordError && <Paragraph color=\"#FF5F5F\">Password does not matched</Paragraph>}\r\n        {isSpecialLetter && <Paragraph color=\"#FF5F5F\">Password should have at least one special character one number and one capital letter i.e 0,1,A,%,$,%,Z</Paragraph>}\r\n\r\n        <InputGroup\r\n          label=\"Set new password\"\r\n          placeholder=\"Enter your password here\"\r\n          type=\"password\"\r\n          value={newPassword}\r\n          onChange={e => handleNewPassword(e.target.value)}\r\n        />\r\n        <InputGroup\r\n          label=\"Confirm password\"\r\n          placeholder=\"Re-type your password here\"\r\n          type=\"password\"\r\n          value={confirmNewPassword}\r\n          onChange={e => handleConfimPassword(e.target.value)}\r\n        />\r\n\r\n        <ButtonBar>\r\n          <Button color=\"#00A652\" onClick={handleChangePassword}>Submit</Button>\r\n        </ButtonBar>\r\n\r\n        <Back />\r\n      </Container>\r\n    </Page>\r\n  )\r\n}\r\n"],"names":["ChangePassword","navigate","useNavigate","dispatch","useDispatch","useState","newPassword","setNewPassword","confirmNewPassword","setConfirmNewPassword","isSpecialLetter","setIsSpecialLetter","confirmPasswordError","setConfirmPasswordError","setResetPasswordError","useSetNewPasswordMutation","addNewPassword","changePasswordSuccess","useSelector","state","reducer","changePassword","success","email","resetPassword","auth","token","useEffect","width","margin","padding","borderRadius","color","label","placeholder","type","value","onChange","e","target","onClick","test","unwrap","then","data","console","log","message","catch","error"],"sourceRoot":""}